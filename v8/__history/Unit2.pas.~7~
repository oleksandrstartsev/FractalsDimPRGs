unit Unit2;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Buttons, Vcl.ExtCtrls, jpeg,
  Vcl.StdCtrls;

type
  TForm2 = class(TForm)
    Image1: TImage;
    SpeedButton1: TSpeedButton;
    OpenDialog1: TOpenDialog;
    Memo1: TMemo;
    SpeedButton2: TSpeedButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure SpeedButton1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form2: TForm2;
  img:array of array of double;

implementation

{$R *.dfm}

uses FRACPRISMUnit1;

procedure TForm2.FormClose(Sender: TObject; var Action: TCloseAction);
begin
Form2.Hide;
Form1.Show;
end;

{
  The following function helps you to convert a RGB Color to Grayscale.
  It works after the american NTSC (National Televisision Standards Committee)
  system.
}


function getGreyScale(Color: TColor): TColor;
var
   R,G,B: Integer;
begin
 Color := ColorToRGB (Color);
  R := Color and $ff;
  G := (Color and $ff00) shr 8;
  B := (Color and $ff0000) shr 16;
  //  NTSC (National Televisision Standards Committee) standart;
  Color := Round(R * 0.56 + G * 0.33 + B * 0.11);
  Result := RGB(Color, Color, Color);
end;

function getGreyScalePixel(Color: TColor): double;
var
   R,G,B: Integer;
begin
 Color := ColorToRGB (Color);
  R := Color and $ff;
  G := (Color and $ff00) shr 8;
  B := (Color and $ff0000) shr 16;
  //  NTSC (National Televisision Standards Committee) standart;
 Result := Round(R * 0.56 + G * 0.33 + B * 0.11);
end;


procedure TForm2.SpeedButton1Click(Sender: TObject);
var
  bmp: TBitmap;
  jpg: TJpegImage;
  scale: Double;
  I: Integer;
  J: Integer;
begin

  if opendialog1.execute then
  begin
    jpg := TJpegImage.Create;
    try
      jpg.Loadfromfile(opendialog1.filename);
      if jpg.Height > jpg.Width then
        scale := {240 /} jpg.Height
      else
        scale := {320 / }jpg.Width;
      bmp := TBitmap.Create;
      try
        {Create thumbnail bitmap, keep pictures aspect ratio}
        bmp.Width := Round(jpg.Width  {* scale});
        bmp.Height:= Round(jpg.Height {* scale});
        bmp.Canvas.StretchDraw(bmp.Canvas.Cliprect, jpg);
       // jpg.Assign(bmp);
  Form2.Memo1.Lines.Add( Inttostr( bmp.Width)+ ' x '
  +Inttostr( bmp.Height));
  SetLength(img, bmp.Width, bmp.Height);
        {Draw thumbnail as control}
       // Self.Canvas.Draw(150, 10, bmp);
        {Convert back to JPEG and save to file}
        jpg.Assign(bmp);
      {  jpg.SaveToFile(
          ChangeFileext(opendialog1.filename, '_thumb.JPG')
        );
       }
      // bmp.Canvas.Pixels[30,30]:=clRed;
       for I :=  0 to bmp.Width-1 do
       for J := 0 to bmp.Height-1 do
   begin
   img[i,j]:=getGreyScalePixel(bmp.Canvas.Pixels[i,j]);
   bmp.Canvas.Pixels[i,j]:=GetGreyScale(bmp.Canvas.Pixels[i,j]);
   // form2.Memo1.Lines.Add(ColortoString( bmp.Canvas.Pixels[i,j]));
    end;

 (*   for I :=  0 to 10 do
       for J := 0 to 10 do
      form2.Memo1.Lines.Add(FloattoStr(img[i,j]));
                                                    *)

       image1.Picture.Assign(bmp);

      finally
        bmp.free;
      end;
    finally
      jpg.free;
    end;
  end;


end;

procedure TForm2.SpeedButton2Click(Sender: TObject);
Var saveDialog : TSaveDialog;
 buttonSelected,i,j : Integer;
selectedsaveFile2 : string;
  myFile2,mysaveFile2 : TextFile;
 s1:string;
begin
if Length(img)>0 then BEGIN

       buttonSelected := VCL.Dialogs.MessageDlg('Save to new file?',mtCustom,
   [mbYes,mbCancel], 0);

if buttonSelected = mrYes    then begin
  saveDialog := TSaveDialog.Create(Form2);
   saveDialog.Title := 'Save your  data into new file';
 saveDialog.InitialDir := GetCurrentDir;
 saveDialog.Filter := 'dat file for Wolfram@Math import [x,y,z]|.dat|txt file [only z-values] |.txt';
 saveDialog.DefaultExt := 'dat';
  saveDialog.FilterIndex := 1;

  if saveDialog.Execute
  then ShowMessage('File : '+saveDialog.FileName)
  else begin ShowMessage('Data saving was cancelled'); exit; end;

  selectedsavefile2:=saveDialog.FileName;
saveDialog.Free; end;

 if buttonSelected = mrCancel then exit;

      AssignFile(mysavefile2,selectedsaveFile2); Rewrite(mysavefile2);
       FormatSettings.DecimalSeparator:='.';
   if saveDialog.FilterIndex=1 then   begin
 for I := 0 to Length(img)-1 do
   for J := 0 to Length(img[i])-1 do
     begin
    WriteLn(mysavefile2,FloatToStrf(i+1,ffFixed,4,1)+'  '+
    FloatToStrf(j+1,ffFixed,4,1)+'  '+FloatToStrf(img[i,j],ffFixed,6,4));

     end; end;
  if saveDialog.FilterIndex=2 then   begin
 for I := 0 to Length(img)-1 do
 begin  s1:='';
   for J := 0 to Length(img[i])-1 do
     begin s1:=s1+'  '+FloatToStrf(img[i,j],ffFixed,4,1);

     end;  WriteLn(mysavefile2,s1);   end;    end;

          FormatSettings.DecimalSeparator:=',';
       CloseFile(mysaveFile2);

                  END;

end;

end.
